<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Trial</title>
<script type="text/javascript">
patchSize=256;
zoomlevel=0;
imageSize= Math.pow(2, zoomlevel)*patchSize;
var height=0;
var width=0;

var imgpsz = { x: 256, y: 256};
// Image Prototype
// objects created by:
// var img = new SVImage( <url>, <xs>, <ys>, <zs>);

function SVImage( url, xs, ys, zs) {
    this.url = url;
    this.xs = xs;
    this.ys = ys;
    this.zs = zs;
}

SVImage.prototype.getUrl = function () {
    return this.url;
}

SVImage.prototype.getXs = function () {
    return this.xs;
}
SVImage.prototype.getYs = function () {
    return this.ys;
}
SVImage.prototype.getZs = function () {
    return this.zs;
}


// Image Point Prototype
// objects created by:
//     var imgpt = new SVImagePoint( <image>, <x>, <y>, <z>);

function SVImagePoint( img, xloc, yloc, zloc) {
    this.image = img;
    this.x = xloc;
    this.y = yloc;
    this.z = zloc;
}

// Viewing Window Prototype
// objects created by:
//     var imgpt = new Vieww( <image-point>, <xs>, <ys>, <zs>);

function Vieww( imgpnt, xs, ys, zs) {
    this.imgpnt = imgpnt;
    this.xs = xs;
    this.ys = ys;
    this.zs = zs;
}

// Image Patch Prototype
// objects created by:
//     var ptch = new SVImagePatch( <image>, <x>, <y>, <z>, <zoom>);

function SVImagePatch( img, xind, yind, zind, zoom) {
    this.image = img;
    this.xind = xind;
    this.yind = yind;
    this.zind = zind;
    this.zm = zoom;
}

// Image Patch Point Prototype
// objects created by:
//     var ptch = new PatchPoint( <patch>, <x>, <y>);

function PatchPoint( patch, xloc, yloc) {
    this.patch = patch;
    this.x = xloc;
    this.y = yloc;
}


// Viewing Window Point Prototype
// objects created by:
//     var imgpt = new ViewPoint( <view-wnd>, <x>, <y>);

function ViewPoint( vw, xloc, yloc) {
    this.vw = vw;
    this.x = xloc;
    this.y = yloc;
}


// Initilizations 
//
//

var imgage = new SVImage;
imgage.xs=0;
imgage.ys=0;
var imagePoint = new SVImagePoint;

var vwcorner=new SVImagePoint;
var vw = new Vieww;
vw.imgpnt=vwcorner;
vw.imgpnt.x = 0;
vw.imgpnt.y = 0;
vw.xs=0;
vw.ys=0;

var patchPoint = new PatchPoint;

var vwPoint0 = new ViewPoint;
var vwPoint1 = new ViewPoint;

var patch = new SVImagePatch;
patch.xind = 1;
patch.yind = 1;


var zoomlevel = 0;
var MaxZoom = 4; /*  0,1,2,3,4*/
var row=0;
var col=0;
var number=0;
//var head="Test%20Images/foo."; /*File name operation */
//var tail = ".jpeg";

var top = 0;   /*the visible window that cropped, its size affects the Zoomoffset function*/
var right = 0;
var bottom = 0;
var left = 0;

var tleft =200	;
var ttop =150;

var row=0;
var col=0;
var dx = 0;
var dy = 0;

var YGridNumber = 1; 
var XGridNumber = 1;


function zoomImg(event)
{ /*trial is the name of the big frame that holds all the patches*/
	if (event.wheelDelta > 0 && zoomlevel < MaxZoom && zoomlevel >= 0) { /* Zoom limit */
		zoomlevel = zoomlevel + 1;/* ZoomIn, load images */
		
		//NumberOfPatches = Math.pow(4, zoomlevel);
		row = col = Math.pow(2, zoomlevel);
        
        img.xs = row * 256;
		img.ys = col * 256;
		img.url = new Array(); // Generating a two dimensional Array according to zoom level
		for (i = 0; i <= 18; i++)
        { //Max row +2 or max col +2 
			img.url[i] = new Array();
			for (j = 0; j <= 18; j++) 
            {
				img.url[i][j] = 0;
			}
		}
				
		for (i = 0; i <= col - 1; i++) 
	    { /* read images  */
			for (j = 0; j <= row - 1; j++) 
			{
				img.url[i + 1][j + 1] = "Test%20Images/foo." + zoomlevel + "." + j + "." + i + ".0.jpeg";
			} // Be careful the name regulation,first up-down then left-right
		}

        patchPoint.x = event.clientX;  //coordinates within a patch,from 0,0 to the dimension of the patch
        patchPoint.y = event.clientY;  //event.offsetX
		if (patchPoint.x==0)   //deals with points on the corners or edges
		{patchPoint.x=1;}
		if (patchPoint.y==0)
		{patchPoint.y=1;}

		patch.image = img.url;
        imagePoint.x = patchPoint.x + vw.imgpnt.x;// imagePoint on whole image coordinates,under current zoom level
        imagePoint.y = patchPoint.y + vw.imgpnt.y;
        imagePoint.img = img;
     
		vwPoint0.x = imagePoint.x%256;  //coordinate in the "simulated" window not the real image cause the real image was not fully loaded  
		vwPoint0.y = imagePoint.y % 256;  // the "illusion" of panning   //event.offsetX,Y
        vwPoint1.x = 2*(imagePoint.x % 128);  //update vwPoint
        vwPoint1.y = 2 * (imagePoint.y % 128);
        
      	var dummyX = 0;
		var dummyY = 0;
		if (imagePoint.x % 128 == 0)
		{ dummyX = imagePoint.x + 1; }
		else
		{dummyX = imagePoint.x;}
		if (imagePoint.y % 128 == 0)
		{ dummyY = imagePoint.y + 1; }
		else
		{ dummyY = imagePoint.y; }

		patch.yind = Math.ceil(2*dummyX / 256); // Inversed,Matlab way of subscripting
		patch.xind = Math.ceil(2*dummyY / 256); //Update "patch" for the zoomed patch


        //Pin point loading, instead of load the whole bunch of patches
		for (i = 1; i < 4; i++) /* load images into pre allocated 4*4 area. Starts from (1,1), centers at (2,2)*/ {
			for (j = 1; j < 4; j++) {
			    if (typeof (img.url[patch.xind + i - 2][patch.yind + j - 2]) != "undefined" && img.url[patch.xind + i - 2][patch.yind + j - 2] != 0) {
			        document.getElementById("img" + i + j).src = img.url[patch.xind + i - 2][patch.yind + j - 2];
				}
				else {
					document.getElementById("img" + i + j).src = ' ';
				}
			}
		}
		// Lines below are added to generate the "zooming at the point" style
      
                
		dx = -(vwPoint1.x - vwPoint0.x); // should be coordinate on viewing window system
		dy = -(vwPoint1.y - vwPoint0.y);
	    CommitMove(); // and change view windows x,y

		vw.imgpnt.x = 2 * imagePoint.x - patchPoint.x;
		vw.imgpnt.y = 2 * imagePoint.y - patchPoint.y;
	}
	}
	
	
function ResizeVW() //change happens to viewing window and grid patches.
{ 
height=parseInt(document.getElementById("Height").value);// property of viewing window
width=parseInt(document.getElementById("Width").value); // fixed, once given

   zoomlevel=document.getElementById("Zoomlevel").value;
			number = Math.pow(4, zoomlevel);
	imgage.xs = Math.pow(2, zoomlevel) * patchSize;
     imgage.ys = Math.pow(2, zoomlevel) * patchSize;

document.getElementById("VW").style.height=height+"px";
document.getElementById("VW").style.width=width+"px";

right=left+width;
bottom=top+height;
document.getElementById("patchGrid").style.clip="rect(" + top + "px " + right + "px " + bottom + "px " + left + "px)";
}


function resetGrid()
{
for (i=1; i<=row; i++)
{
var table = document.getElementById("patchGrid");
var tr= document.getElementById("tr1");
table.removeChild(tr);
}
}

 function gridFormation()
{
resetGrid();
   row=Math.ceil((vw.imgpnt.x-dx+width)/patchSize)+1;
   col=Math.ceil((vw.imgpnt.x-dx+width)/patchSize)+1;

   zoomlevel=document.getElementById("Zoomlevel").value;
   var table = document.getElementById("patchGrid");
	
	 table.style.height=row*patchSize;
      table.style.width=col*patchSize;
		
	for (i = 1; i <= row; i++) {
		var tr = document.createElement("tr");
		tr.height =patchSize ;
		tr.width=col*patchSize;
		tr.id="tr1";
		for(j=1;j<=col;j++){
		
				dummy=document.createElement("td");
				dummy.height=patchSize;
				dummy.width=patchSize;
				img=document.createElement("img");
				img.id="img"+i+j;
				img.src="http://wonko.via.cornell.edu/bigimgs/test1/foo."+ zoomlevel + "." +( j -1)+ "." + (i-1) + ".0.jpeg";
                      dummy.appendChild(img);
				tr.appendChild(dummy);
			
		}
		table.appendChild(tr);
	}

}



function trial_ondragstart(event) {
    CooX0 = event.clientX;
    CooY0 = event.clientY;
    vw.xs=width;
    vw.ys=height;

}
function trial_ondrag(event, trial) {
    CooX1 = event.clientX;
    CooY1 = event.clientY;

    dx = 3*(CooX1 - CooX0);
    dy = 3*(CooY1 - CooY0);
    CooX0 = CooX1;    /*update frame*/
    CooY0 = CooY1;

    if (dx != 0 || dy != 0)
    { CommitMove(trial); }
   
    imageDimension=patchSize*Math.pow(2, zoomlevel);
}
function trial_ondragend() {
    dx = 0;
    dy = 0;
}
function CommitMove() {


 if((vw.imgpnt.x-dx)>=0&&(vw.imgpnt.y-dy)>=0&&
(vw.imgpnt.x-dx+width)<=patchSize*row
&&(vw.imgpnt.y-dy+height)<=patchSize*col) // if dx or dy >256, first load new images and than "simulate" a panning
{                           //panning within the buffer zone
     vw.imgpnt.x = vw.imgpnt.x - dx; // Update coordinates of view windox x,y changes with zooming
    vw.imgpnt.y = vw.imgpnt.y - dy;
  
    document.getElementById("X").value=vw.imgpnt.x;  //Display for the sake of debug
    document.getElementById("Y").value=vw.imgpnt.y;
    document.getElementById("DiagX").value=vw.imgpnt.x+height;
    document.getElementById("DiagY").value=vw.imgpnt.y+width;

    right = right - dx; 
    left = left - dx;
    top = top - dy;
    bottom = bottom - dy;
 
    tleft = parseInt(document.getElementById('patchGrid').style.left) + dx;
    document.getElementById('patchGrid').style.left = tleft + 'px';
    ttop = parseInt(document.getElementById('patchGrid').style.top) + dy;
    document.getElementById('patchGrid').style.top = ttop + 'px';
    document.getElementById('patchGrid').style.clip = "rect(" + top + "px " + right + "px " + bottom + "px " + left + "px)";
}

//Panning outside the buffer zone
 if((vw.imgpnt.x-dx)>=0&&(vw.imgpnt.y-dy)>=0&&(vw.imgpnt.x-dx+width)<imgage.xs
 &&(vw.imgpnt.y-dy+height)<imgage.ys&&
((vw.imgpnt.x-dx+width)>patchSize*row
||(vw.imgpnt.y-dy+height)>patchSize*col))
{

    resetGrid();

   row=row+1;
   col=col+1;
   zoomlevel=document.getElementById("Zoomlevel").value;
   var table = document.getElementById("patchGrid");
	
	 table.style.height=row*256;
      table.style.width=col*256;
		
	for (i = 1; i <= row; i++) {
		var tr = document.createElement("tr");
		tr.height =patchSize ;
		tr.width=col*patchSize;
		tr.id="tr1";
		for(j=1;j<=col;j++){
		
				dummy=document.createElement("td");
				dummy.height=patchSize;
				dummy.width=patchSize;
				img=document.createElement("img");
				img.id="img"+i+j;
				img.src="http://wonko.via.cornell.edu/bigimgs/test1/foo."+ zoomlevel + "." +( j -1)+ "." + (i-1) + ".0.jpeg";
                      dummy.appendChild(img);
				tr.appendChild(dummy);
			
		}
		table.appendChild(tr);
	}


 vw.imgpnt.x = vw.imgpnt.x - dx; // Update coordinates of view windox x,y changes with zooming
    vw.imgpnt.y = vw.imgpnt.y - dy;
  

    right = right - dx; 
    left = left - dx;
    top = top - dy;
    bottom = bottom - dy;
 
    tleft = parseInt(document.getElementById('patchGrid').style.left) + dx;
    document.getElementById('patchGrid').style.left = tleft + 'px';
    ttop = parseInt(document.getElementById('patchGrid').style.top) + dy;
    document.getElementById('patchGrid').style.top = ttop + 'px';
    document.getElementById('patchGrid').style.clip = "rect(" + top + "px " + right + "px " + bottom + "px " + left + "px)";

   

}
}

function InputMove()
{

    dx=-parseInt(document.getElementById("dx").value);  //Display for the sake of debug
    dy=-parseInt(document.getElementById("dy").value);
CommitMove();

}



</script>


</head>

<body onload="ResizeVW();gridFormation()">

<form method="post">
	<input id="Height"name="Height" type="text" onchange="ResizeVW();gridFormation()"value="250" />
	<input id="Width" name="Width" type="text"  onchange="ResizeVW();gridFormation()" value="250"/>
	<input id="Zoomlevel" name="Zoomlevel" type="text" onchange="gridFormation()" value="3"/></form>

<div  id="VW" style="border: thin #FF00FF solid; position: absolute; width: 256px; height: 256px; z-index: 1; left: 200px; top: 150px" id="layer1">
</div>

<table id="patchGrid"cellpadding="0" cellspacing="0" style="width: 512px; height: 512px; position: absolute; left: 200px; top: 150px;"        
        ondragstart="trial_ondragstart(event)"
        ondrag="trial_ondrag(event,patchGrid)"
        ondragend="trial_ondragend()"
     >

</table>

<form method="post">
				<input id="X"name="Text1" type="text" /><input id="Y"name="Text2" type="text" /><input id="DiagX"name="Text3" type="text" onchange="CommitMove()"/><input id="DiagY"name="Text4" type="text" onchange="CommitMove()"/><input id="dx"name="Text5" type="text" onchange="InputMove()" value="0"/><input id="dy"name="Text6" type="text" onchange="InputMove()" value="0"/></form>

</body>

</html>
