<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Trial</title>
<script type="text/javascript">

patchSize=256;
zoomlevel=0;
imageSize= Math.pow(2, zoomlevel)*patchSize;
var height=0;
var width=0;
var imgpsz = { x: 256, y: 256};
// Image Prototype
// objects created by:
// var img = new SVImage( <url>, <xs>, <ys>, <zs>);

function SVImage( url, xs, ys, zs) {
    this.url = url;
    this.xs = xs;
    this.ys = ys;
    this.zs = zs;
}

SVImage.prototype.getUrl = function () {
    return this.url;
}

SVImage.prototype.getXs = function () {
    return this.xs;
}
SVImage.prototype.getYs = function () {
    return this.ys;
}
SVImage.prototype.getZs = function () {
    return this.zs;
}


// Image Point Prototype
// objects created by:
//     var imgpt = new SVImagePoint( <image>, <x>, <y>, <z>);

function SVImagePoint( img, xloc, yloc, zloc) {
    this.image = img;
    this.x = xloc;
    this.y = yloc;
    this.z = zloc;
}

// Viewing Window Prototype
// objects created by:
//     var imgpt = new Vieww( <image-point>, <xs>, <ys>, <zs>);

function Vieww( imgpnt, xs, ys, zs) {
    this.imgpnt = imgpnt;
    this.xs = xs;
    this.ys = ys;
    this.zs = zs;
}

// Image Patch Prototype
// objects created by:
//     var ptch = new SVImagePatch( <image>, <x>, <y>, <z>, <zoom>);

function SVImagePatch( img, xind, yind, zind, zoom) {
    this.image = img;
    this.xind = xind;
    this.yind = yind;
    this.zind = zind;
    this.zm = zoom;
}

// Image Patch Point Prototype
// objects created by:
//     var ptch = new PatchPoint( <patch>, <x>, <y>);

function PatchPoint( patch, xloc, yloc) {
    this.patch = patch;
    this.x = xloc;
    this.y = yloc;
}


// Viewing Window Point Prototype
// objects created by:
//     var imgpt = new ViewPoint( <view-wnd>, <x>, <y>);

function ViewPoint( vw, xloc, yloc) {
    this.vw = vw;
    this.x = xloc;
    this.y = yloc;
}


// Initilizations 

var imgage = new SVImage;
imgage.xs=0;
imgage.ys=0;
var imagePoint = new SVImagePoint;

var vwcorner=new SVImagePoint;
var vw = new Vieww;
vw.imgpnt=vwcorner;
vw.imgpnt.x = 0;
vw.imgpnt.y = 0;
vw.xs=0;
vw.ys=0;

var patchPoint = new PatchPoint;

var vwPoint0 = new ViewPoint;
var vwPoint1 = new ViewPoint;

var patch = new SVImagePatch;
patch.xind = 1;
patch.yind = 1;

var zIndex=0;
var zoomlevel = 0;
var MaxZoom = 4; /*  0,1,2,3,4*/
var row=0;
var col=0;
var number=0;
//var head="Test%20Images/foo."; /*File name operation */
//var tail = ".jpeg";

var top = 0;   /*the visible window that cropped, its size affects the Zoomoffset function*/
var right = 0;
var bottom = 0;
var left = 0;

var tleft =20	;
var ttop =70;

var row=0;
var col=0;
var dx = 0;
var dy = 0;
var MaxZoom=4;
var YGridNumber = 1; 
var XGridNumber = 1;
	
function ResizeVW() //change happens to viewing window and grid patches.
{ 
  height=parseInt(document.getElementById("Height").value);// property of viewing window
  width=parseInt(document.getElementById("Width").value); // fixed, once given
  zoomlevel=document.getElementById("Zoomlevel").value;

var boundaryCheckY=vw.imgpnt.y+height-patchSize*Math.pow(2, zoomlevel);
var boundaryCheckX=vw.imgpnt.x+width-patchSize*Math.pow(2, zoomlevel);



 if(boundaryCheckX>0) //resize on the edge of boundary
 {dx=boundaryCheckX; dy=0; CommitMove();}
  if( boundaryCheckY>0) 
 {dx=0; dy=boundaryCheckY;CommitMove();}

 
     number = Math.pow(4, zoomlevel);
     imgage.xs = Math.pow(2, zoomlevel) * patchSize;
     imgage.ys = Math.pow(2, zoomlevel) * patchSize;
 
  document.getElementById("VW").style.height=height+"px";
  document.getElementById("VW").style.width=width+"px";

right=left+width;
bottom=top+height;
document.getElementById("patchGrid").style.clip="rect(" + top + "px " + right + "px " + bottom + "px " + left + "px)";
}


//function resetGrid()
//{
//for (i=1; i<=row; i++)
//{
//var table = document.getElementById("patchGrid");
//var tr= document.getElementById("tr1");
//table.removeChild(tr);
//}
//}
function resetGrid()
{
for (i=1; i<=20; i++)// A priori number set
{for (j=1; j<=20; j++)
{
document.getElementById("img["+i+"]["+j+"]").style.display="none";//hide contents;
}
}

}



 function gridFormation()
{
//resetGrid();
   row=col=20; // Fixed number of grids, but load according to the size of viewing window
   //row=Math.ceil((vw.imgpnt.x-dx+width)/patchSize)+1;
   //col=Math.ceil((vw.imgpnt.x-dx+width)/patchSize)+1;
    X=parseInt(document.getElementById("X").value);  //Initial offset
    Y=parseInt(document.getElementById("Y").value);
    dx=-(X-vw.imgpnt.x);
    dy=-(Y-vw.imgpnt.y);
    CommitMove();
   
   
   zoomlevel=document.getElementById("Zoomlevel").value;
   zIndex=document.getElementById("zIndex").value;
   var table = document.getElementById("patchGrid");
	
	 table.style.height=row*patchSize;
      table.style.width=col*patchSize;
		
	for (i = 1; i <= row; i++) {
		var tr = document.createElement("tr");
		tr.height =patchSize ;
		tr.width=col*patchSize;
		tr.id="tr1";
		for(j=1;j<=col;j++){
		
				dummy=document.createElement("td");
				dummy.height=patchSize;
				dummy.width=patchSize;
				img=document.createElement("img");
			      img.id="img["+i+"]["+j+"]";
			      img.style.display="none";
                     dummy.appendChild(img);
				tr.appendChild(dummy);		
		}
		table.appendChild(tr);
	}
}

function CreatePathLoadingProcess()

{ setInterval("PatchLoadingX()",90);}


function PatchLoadingX()
{
  col=Math.ceil((vw.imgpnt.x-dx+width)/patchSize)+1;
   row=Math.ceil((vw.imgpnt.y-dy+height)/patchSize)+1;
  zoomlevel=document.getElementById("Zoomlevel").value;
   zIndex=document.getElementById("zIndex").value;

if (row>Math.pow(2, zoomlevel))
{row=Math.pow(2, zoomlevel);}
if (col>Math.pow(2, zoomlevel))
{col=Math.pow(2, zoomlevel);}


for(I=1;I<=row;I++)
{
 for (J=1;J<=col;J++) // img[i][j], the naming system
 {document.getElementById("img["+I+"]["+J+"]").style.display="";
 document.getElementById("img["+I+"]["+J+"]").src="http://wonko.via.cornell.edu/bigimgs/test2/bar."+ zoomlevel + "." +( J -1)+ "." + (I-1) + "."+ zIndex + ".jpeg";
 }
 }
clearInterval;
}


function trial_ondragstart(event) {
    CooX0 = event.clientX;
    CooY0 = event.clientY;
    vw.xs=width;
    vw.ys=height;

}
    
function trial_ondrag(event, trial) {
    imageDimension=patchSize*Math.pow(2, zoomlevel);
    CooX1 = event.clientX;
    CooY1 = event.clientY;

    dx = 2*(CooX1 - CooX0);
    dy = 2*(CooY1 - CooY0);
    CooX0 = CooX1;    /*update frame*/
    CooY0 = CooY1;

    if ((vw.imgpnt.x - dx)>0&&(vw.imgpnt.y - dy)>0
    &&(vw.imgpnt.x-dx+width)<patchSize*Math.pow(2, zoomlevel)&&
    (vw.imgpnt.y-dy+height)<patchSize*Math.pow(2, zoomlevel))
    { CommitMove(trial); }//Panning outside the buffer zone

  if((vw.imgpnt.x+width)>patchSize*row||(vw.imgpnt.y+height)>patchSize*col)
{CreatePathLoadingProcess();}


}

function trial_ondragend() {
   //  dx = 0;
   //  dy = 0;
}

function CommitMove() {
   vw.imgpnt.x = vw.imgpnt.x - dx; // Update coordinates of view windox x,y changes with zooming
   vw.imgpnt.y = vw.imgpnt.y - dy;
   //vw.imgpnt.x = -vw.imgpnt.x +dx; 
    //  vw.imgpnt.y = -vw.imgpnt.y + dy;

   
                         //panning within the buffer zone
    document.getElementById("X").value=vw.imgpnt.x;  //Display for the sake of debug
    document.getElementById("Y").value=vw.imgpnt.y;
    document.getElementById("DiagX").value=vw.imgpnt.x+width;
    document.getElementById("DiagY").value=vw.imgpnt.y+height;

    right = right - dx; 
    left = left - dx;
    top = top - dy;
    bottom = bottom - dy;
 
    tleft = parseInt(document.getElementById('patchGrid').style.left) + dx;
    document.getElementById('patchGrid').style.left = tleft + 'px';
    ttop = parseInt(document.getElementById('patchGrid').style.top) + dy;
    document.getElementById('patchGrid').style.top = ttop + 'px';
    document.getElementById('patchGrid').style.clip = "rect(" + top + "px " + right + "px " + bottom + "px " + left + "px)";
    dx = 0;// Attention !!!
    dy = 0;//  Attention !!! It was moved from ondragend() 

}

function InputMove()
{
    X=parseInt(document.getElementById("X").value);  //Display for the sake of debug
    Y=parseInt(document.getElementById("Y").value);
    
    dx=-(X-vw.imgpnt.x);
    dy=-(Y-vw.imgpnt.y);

 if ((vw.imgpnt.x - dx)>0&&(vw.imgpnt.y - dy)>0
    &&(vw.imgpnt.x-dx+width)<patchSize*Math.pow(2, zoomlevel)&&
    (vw.imgpnt.y-dy+height)<patchSize*Math.pow(2, zoomlevel))
    { CommitMove(); }//Panning outside the buffer zone

  if((vw.imgpnt.x+width)>patchSize*row||(vw.imgpnt.y+height)>patchSize*col)
{CreatePathLoadingProcess();}

}



function CenterOffsetIn(imagePoint) //CenterOffset(Zfactor,imagePoint)
{

 //zoomlevel=document.getElementById("Zoomlevel").value;
  zoomlevel=parseInt(document.getElementById("Zoomlevel").value);
if (zoomlevel < MaxZoom && zoomlevel >= 0)
{
 zoomlevel=zoomlevel+1;
 document.getElementById("Zoomlevel").value=zoomlevel;

 var centerX = (vw.imgpnt.x+0.5*width);
 var centerY = (vw.imgpnt.y+0.5*height);// center of the viewing window in the zoomed frame

X=2*centerX-0.5*width;  //Zoom from center
Y=2*centerY-0.5*height;
//X=Zfactor*imagePoint.x-0.5*width;
//Y=Zfactor*imagePoint.y-0.5*height;

    dx=-(X-vw.imgpnt.x);
    dy=-(Y-vw.imgpnt.y);

 if ((vw.imgpnt.x - dx)>0&&(vw.imgpnt.y - dy)>0
    &&(vw.imgpnt.x-dx+width)<patchSize*Math.pow(2, zoomlevel)&&
    (vw.imgpnt.y-dy+height)<patchSize*Math.pow(2, zoomlevel))
    { CommitMove(); }//Panning outside the buffer zone

  if((vw.imgpnt.x+width)>patchSize*row||(vw.imgpnt.y+height)>patchSize*col)
{CreatePathLoadingProcess();}

}
}


function CenterOffsetOut(imagePoint) //CenterOffset(Zfactor,imagePoint)
{

 //zoomlevel=document.getElementById("Zoomlevel").value;
  zoomlevel=parseInt(document.getElementById("Zoomlevel").value);
if (zoomlevel <=MaxZoom && zoomlevel > 0)
{
 zoomlevel=zoomlevel-1;
 document.getElementById("Zoomlevel").value=zoomlevel;

 var centerX = (vw.imgpnt.x+0.5*width);
 var centerY = (vw.imgpnt.y+0.5*height);// center of the viewing window in the zoomed frame

X=0.5*centerX-0.5*width;  //Zoom from center
Y=0.5*centerY-0.5*height;
//X=Zfactor*imagePoint.x-0.5*width;
//Y=Zfactor*imagePoint.y-0.5*height;

    dx=-(X-vw.imgpnt.x);
    dy=-(Y-vw.imgpnt.y);

 if ((vw.imgpnt.x - dx)>0&&(vw.imgpnt.y - dy)>0
    &&(vw.imgpnt.x-dx+width)<patchSize*Math.pow(2, zoomlevel)&&
    (vw.imgpnt.y-dy+height)<patchSize*Math.pow(2, zoomlevel))
    { CommitMove(); }//Panning outside the buffer zone

  if((vw.imgpnt.x+width)>patchSize*row||(vw.imgpnt.y+height)>patchSize*col)
{CreatePathLoadingProcess();}

}
}

function ImageZoom()
{
 zoomlevel=parseInt(document.getElementById("Zoomlevel").value);
   patchPoint.x = event.clientX;  //coordinates within a patch,from 0,0 to the dimension of the patch
   patchPoint.y = event.clientY;  //event.offsetX
		if (patchPoint.x==0)   //deals with points on the corners or edges
		{patchPoint.x=1;}
		if (patchPoint.y==0)
		{patchPoint.y=1;}
        imagePoint.x = patchPoint.x + vw.imgpnt.x;// imagePoint on whole image coordinates,under current zoom level
        imagePoint.y = patchPoint.y + vw.imgpnt.y;

if (event.wheelDelta > 0 && zoomlevel < MaxZoom && zoomlevel >= 0)
 { /* Zoom limit */
		zoomlevel = zoomlevel + 1;/* ZoomIn, load images */
		document.getElementById("Zoomlevel").value=zoomlevel;
		var Zfactor=2;
resetGrid();CreatePathLoadingProcess();CenterOffset(Zfactor,imagePoint)}

  if (event.wheelDelta < 0 && zoomlevel <= MaxZoom && zoomlevel > 0 ) 
  { /* ZoomOut, clearOut images */
		zoomlevel = zoomlevel - 1;
		document.getElementById("Zoomlevel").value=zoomlevel;
		var Zfactor=0.5;
resetGrid();CreatePathLoadingProcess();CenterOffset(Zfactor,imagePoint)}

}

</script>
</head>

<body onload="ResizeVW();gridFormation();CreatePathLoadingProcess()">

<form method="post">
	<input id="Width" name="Width" type="text" onchange="resetGrid();CreatePathLoadingProcess();ResizeVW()" value="400" />
	<input id="Height" name="Height" type="text"   onchange="resetGrid();CreatePathLoadingProcess();ResizeVW()" value="400"/>
	<input id="Zoomlevel"name="zoomlevel" type="text" onchange="resetGrid();CreatePathLoadingProcess();CenterOffset()"value="1" /><input id="zIndex" name="zIndex" type="text"type="text" onchange="resetGrid();CreatePathLoadingProcess()
"   value="0" /><input name="ZoomIn" type="button" value="ZoomIn" onclick="resetGrid();CreatePathLoadingProcess();CenterOffsetIn()"/><input name="ZoomOut" type="button" value="ZoomOut" onclick="resetGrid();CreatePathLoadingProcess();CenterOffsetOut()"/></form>

<div  id="VW" style="border: thin #FF00FF solid; position: absolute; width: 256px; height: 256px; z-index: 1; left: 20px; top: 70px" id="layer1">
</div>

<table id="patchGrid"cellpadding="0" cellspacing="0" style="width: 512px; height: 512px; position: absolute; left: 20px; top: 70px; right: 1157px;"        
        ondragstart="trial_ondragstart(event)"
        ondrag="trial_ondrag(event,patchGrid)"
        ondragend="trial_ondragend()"
        onmousewheel="ImageZoom(event)" >
</table>

<form method="post">
				<input id="X"name="Text1" type="text" onchange="InputMove()" value="100"/><input id="Y"name="Text2" type="text"onchange="InputMove()" value="100" /><input id="DiagX"name="Text3" type="text"/><input id="DiagY"name="Text4" type="text" /></form>
</body>

</html>
