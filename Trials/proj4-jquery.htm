<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    <!--<script type="text/javascript" src="http://code.jquery.com/jquery-1.4.2.js">
    </script>-->
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <!--CSS Style Sheet-->
        <style type="text/css">
            div.frame {
                color: #FF00FF;
            }
            
            #VW {
                border: thin #FF00FF solid;
                position: absolute;
                width: 50px;
                height: 50px;
                z-index: 1;
                left: 100px;
                top: 230px;
            }
            
            #patchGrid {
                border: thin #000000 none;
                position: absolute;
                z-index: 1;/*test*/
                width: 512px;
                height: 512px;
                left: 100px;
                top: 230px;
            }
            
            /*the following is for making sliders*/
            #controls dl.col {
                background: none repeat scroll 0 0 #202020;
                border: 1px solid #1C1C1C;
                display: inline;
                float: left;
                height: 12.4em;
                margin: 0 1em 0 0;
                padding: 0.75em;
                position: relative;
            }
            
            #controls .control .bar {
                background: url("http://www.schillmania.com/projects/fireworks/demo-only/slider-bar.gif") no-repeat scroll 0 9px transparent;
                cursor: pointer;
                height: 20px;
                left: 0;
                position: absolute;
                top: 0;
                width: 214px;
            }
            
            #controls .control .slider {
                position: absolute;
                left: 0px;
                top: 0px;
                width: 20px;
                height: 20px;
                background: transparent url(http://www.schillmania.com/projects/fireworks/demo-only/slider.png) no-repeat 0px 0px;
                /*background:none;*/
                /*filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled=true,sizingMethod=crop,src='http://www.schillmania.com/projects/fireworks/demo-only/slider.png');*/
                cursor: pointer;
                cursor: hand;
            }
            
            #controls dd {
                color: #6699CC;
                font-size: 0.9em;
            }
            
            #controls dl {
                width: 21em;
            }
            
            #controls {
                font-size: 0.85em;
            }
            
            #site {
                border-style: non dashed;
                text-align: left;
            }
            
            body {
                color: #BBBBBB;
                font: 76% verdana, arial, tahoma, helvetica;
            }
        </style>
        <title>proj4.htm</title>
        <script type="text/javascript">
            
            patchSize = 256;
            zoomlevel = 0;
            imageSize = Math.pow(2, zoomlevel) * patchSize;
            var height = 0;
            var width = 0;
            
            var imgpsz = {
                x: 256,
                y: 256
            };
            // Image Prototype
            // objects created by:
            //     var img = new SVImage( <url>, <xs>, <ys>, <zs>);
            
            function SVImage(url, xs, ys, zs){
                this.url = url;
                this.xs = xs;
                this.ys = ys;
                this.zs = zs;
            }
            
            SVImage.prototype.getUrl = function(){
                return this.url;
            }
            
            SVImage.prototype.getXs = function(){
                return this.xs;
            }
            SVImage.prototype.getYs = function(){
                return this.ys;
            }
            SVImage.prototype.getZs = function(){
                return this.zs;
            }
            
            // Image Point Prototype
            // objects created by:
            //     var imgpt = new SVImagePoint( <image>, <x>, <y>, <z>);
            
            function SVImagePoint(img, xloc, yloc, zloc){
                this.image = img;
                this.x = xloc;
                this.y = yloc;
                this.z = zloc;
            }
            
            // Viewing Window Prototype
            // objects created by:
            //     var imgpt = new Vieww( <image-point>, <xs>, <ys>, <zs>);
            
            function Vieww(imgpnt, xs, ys, zs){
                this.imgpnt = imgpnt;
                this.xs = xs;
                this.ys = ys;
                this.zs = zs;
            }
            
            // Image Patch Prototype
            // objects created by:
            //     var ptch = new SVImagePatch( <image>, <x>, <y>, <z>, <zoom>);
            
            function SVImagePatch(img, xind, yind, zind, zoom){
                this.image = img;
                this.xind = xind;
                this.yind = yind;
                this.zind = zind;
                this.zm = zoom;
            }
            
            // Image Patch Point Prototype
            // objects created by:
            //     var ptch = new PatchPoint( <patch>, <x>, <y>);
            
            function PatchPoint(patch, xloc, yloc){
                this.patch = patch;
                this.x = xloc;
                this.y = yloc;
            }
            
            
            // Viewing Window Point Prototype
            // objects created by:
            //     var imgpt = new ViewPoint( <view-wnd>, <x>, <y>);
            
            function ViewPoint(vw, xloc, yloc){
                this.vw = vw;
                this.x = xloc;
                this.y = yloc;
            }
            
            
            // Initializations 
            //
            //
            
            var img = new SVImage;
            
            var imagePoint = new SVImagePoint;
            
            var vwcorner = new SVImagePoint;
            var vw = new Vieww;
            vw.imgpnt = vwcorner;
            vw.imgpnt.x = 0;
            vw.imgpnt.y = 0;
            var patchPoint = new PatchPoint;
            
            var vwPoint0 = new ViewPoint;
            var vwPoint1 = new ViewPoint;
            
            var patch = new SVImagePatch;
            patch.xind = 1;
            patch.yind = 1;
            
            
            var zoomlevel = 0;
            var MaxZoom = 4; /*  0,1,2,3,4*/
            var row = 0;
            var col = 0;
            var number = 0;
            var head = "Test%20Images/foo."; /*File name operation */
            var tail = ".jpeg";
            
            var top = 0; /*the visible window that cropped, its size affects the Zoomoffset function*/
            var right = 0;
            var bottom = 0;
            var left = 0;
            
            var tleft = 200;
            var ttop = 150;
            
            var dx = 0;
            var dy = 0;
            
            var YGridNumber = 1;
            var XGridNumber = 1;
            
            
            //both the viewing window and grid patches are changed 
            function change(){
                document.getElementById("VW").style.height = document.getElementById("text1").value + "px";
                document.getElementById("VW").style.width = document.getElementById("text2").value + "px";
                bottom = document.getElementById("text1").value;
                right = document.getElementById("text2").value;
                document.getElementById("patchGrid").style.height = Math.ceil(bottom / 256) * 256;
                document.getElementById("patchGrid").style.width = Math.ceil(right / 256) * 256;
                //maybe moving to a style sheet was the problem?
                document.getElementById("patchGrid").style.clip = "rect(" + top + "px " + right + "px " + bottom + "px " + left + "px)";
            }
            
            var row = 0;
            var col = 0;
            
            function gridFormation(){
                change();
                //$(document).ready(function(){
                //number = Math.pow(4, zoomlevel);
                //row = col = Math.pow(2, zoomlevel);
                row = Math.ceil(bottom / patchSize);
                col = Math.ceil(right / patchSize);
                //alert(patchSize);
                zoomlevel = document.getElementById("text3").value;
                
                //clear out patchGrid
                //$('#patchGrid').empty();
                
                //clear out patchGrid
                document.getElementById("patchGrid").innerHTML = "";//might be buggy on mac?
                for (i = 1; i <= row; i++) {
                    for (j = 1; j <= col; j++) {
                        //dummy is an image tag
                        dummy = document.createElement("img");
                        
                        document.getElementById("patchGrid").appendChild(dummy);
                        
                        //$('dummy').hide();
                        dummy.id = "img" + i + j;
                        dummy.height = patchSize;
                        dummy.width = patchSize;
                        //dummy.style.visibility = "hidden";
                        imageId = dummy.id;
                        image = document.getElementById(imageId);
                        //after the dummy image is loaded
                        dummy.onload = function(){
                            //alert("hello");
                            setOpacity(image, 0);
                            image.style.visibility = "visible";
                            
                        }
                        fadeIn(imageId, 0);
                        
                        dummy.src = "http://wonko.via.cornell.edu/bigimgs/test1/foo." + zoomlevel + "." + (j - 1) + "." + (i - 1) + ".0.jpeg";
                        
                        //$('#patchGrid').append(dummy);
                        
                        
                        //for some reason this seems to hang...
                        window.onload = function(){
                        }
                        
                        
                        //dummy.style.visibility = 'visible';
                    
                    
                    
                        /*
                         var dummy = new Image();
                         $(dummy).load(function(){
                         //$(dummy).hide();
                         $('#patchGrid').append(dummy);
                         $(dummy).fadeIn();
                         }).attr('id', function(){
                         return 'img' + i + j;
                         }).attr('height', patchSize
                         ).attr('width', function(){
                         return patchSize;
                         }).error(function(){
                         //alert('Image could not be loaded!');// notify the user that the image could not be loaded
                         }).attr('src', function(){
                         return 'http://wonko.via.cornell.edu/bigimgs/test1/foo.' + zoomlevel + '.' + (j - 1) + '.' + (i - 1) + '.0.jpeg';
                         });
                         */
                    }
                }
                //});
            }
            
            
            /*
             function initImage(){
             imageId = 'img' + i + j;
             image = document.getElementById(imageId);
             setOpacity(image, 0);
             image.style.visibility = 'visible';
             fadeIn(imageId, 0);
             }
             */
            function setOpacity(obj, opacity){
                opacity = (opacity == 100) ? 99.999 : opacity;
                
                // IE/Win
                obj.style.filter = "alpha(opacity:" + opacity + ")";
                
                // Safari<1.2, Konqueror
                obj.style.KHTMLOpacity = opacity / 100;
                
                // Older Mozilla and Firefox
                obj.style.MozOpacity = opacity / 100;
                
                // Safari 1.2, newer Firefox and Mozilla, CSS3
                obj.style.opacity = opacity / 100;
            }
            
            function fadeIn(objId, opacity){
                if (document.getElementById) {
                    obj = document.getElementById(objId);
                    if (opacity <= 100) {
                        setOpacity(obj, opacity);
                        opacity += 10;
                        window.setTimeout("fadeIn('" + objId + "'," + opacity + ")", 100);
                    }
                }
            }
            
            //currently not in use
            /*
             function ResetGridFormation(){
             //document.getElementById('patchGrid').reset();
             //maybe try removeChild, which gets removes specified elements?
             for (i = 1; i <= row; i++) {
             for (j = 1; j <= col; j++) {
             dummy = document.createElement("img");
             dummy.id = "img" + i + j;
             dummy.height = patchSize;
             dummy.width = patchSize;
             
             dummy.src = "http://wonko.via.cornell.edu/bigimgs/test1/foo." + zoomlevel + "." + (j - 1) + "." + (i - 1) + ".0.jpeg";
             document.getElementById("patchGrid").removeChild(dummy)
             }
             }
             }*/
            function trial_ondragstart(event){
                CooX0 = event.clientX;
                CooY0 = event.clientY;
            }
            
            function trial_ondrag(event, trial){
                CooX1 = event.clientX;
                CooY1 = event.clientY;
                
                dx = CooX1 - CooX0;
                dy = CooY1 - CooY0;
                CooX0 = CooX1; /*update frame*/
                CooY0 = CooY1;
                
                if (dx != 0 || dy != 0) {
                    CommitMove(trial);
                }
                
                vw.imgpnt.x = vw.imgpnt.x - dx; // coordinates of view windox x,y changes with zooming
                vw.imgpnt.y = vw.imgpnt.y - dy;
            }
            
            function trial_ondragend(){
                dx = 0;
                dy = 0;
            }
            
            function CommitMove(){
                if (dx <= 256 && dy <= 256) // if dx or dy >256, first load new images and than "simulate" a panning
                { // since we only have one extra padding image layer.
                    right = right - dx;
                    left = left - dx;
                    top = top - dy;
                    bottom = bottom - dy;
                    
                    tleft = parseInt(document.getElementById('patchGrid').style.left) + dx;
                    document.getElementById('patchGrid').style.left = tleft + 'px';
                    ttop = parseInt(document.getElementById('patchGrid').style.top) + dy;
                    document.getElementById('patchGrid').style.top = ttop + 'px';
                    
                    document.getElementById('patchGrid').style.clip = "rect(" + top + "px " + right + "px " + bottom + "px " + left + "px)";
                }
            }
        </script>
    </head>
    <body onload="gridFormation()">
        <table border="2">
            <tr>
                <td>
                    <label for="text1" class="hiddenlabel">
                        Height:
                    </label>
                    <br/>
                    <input id="text1" name="Height" type="text" value="1000" onkeypress="if(event.keyCode == 13 || event.keyCode == 9) change()"/>
                </td>
                <td>
                    <label for="text2" class="hiddenlabel">
                        Width:
                    </label>
                    <br/>
                    <input id="text2" name="Width" type="text" value="1000" onkeypress="if(event.keyCode == 13 || event.keyCode == 9) change()"/>
                </td>
                <td>
                    <label for="text3" class="hiddenlabel">
                        Zoomlevel:
                    </label>
                    <br/>
                    <input id="text3" name="Zoomlevel" type="text" value="2" onkeypress="if(event.keyCode == 13 || event.keyCode == 9) gridFormation()"/>
                </td>
            </tr>
        </table>
        <p>
            <b>proj4.htm</b>
            - please press enter key after typing number in text box.
        </p>
        <ul>
            <li>
                system defines and manages the number of patches needed to cover the viewing window
            </li>
            <li>
                when zoom > 0 loads patches to fill viewing window
            </li>
            <li>
                [patches are joined together like a single image]
            </li>
        </ul>
        <!--added in dl element for sliders-->
        <div id="controls">
            <dl class="col">
                <dt>
                    Blast Radius
                </dt>
                <dd class="title">
                    % of window size
                </dd>
                <dd>
                    17
                </dd>
                <dd class="control">
                    <div title="Click to move here" class="bar">
                    </div>
                    <div title="Size of the explosion" class="slider" style="margin-left: 33px;">
                    </div>
                </dd>
                <dt>
                    Particles
                </dt>
                <dd class="title">
                    Explosion elements
                </dd>
                <dd>
                    137
                </dd>
                <dd class="control">
                    <div title="Click to move here" class="bar">
                    </div>
                    <div title="Number of elements - more means slower" class="slider" style="margin-left: 140px;">
                    </div>
                </dd>
                <dt>
                    Circles
                </dt>
                <dd class="title">
                    ..per explosion
                </dd>
                <dd>
                    2
                </dd>
                <dd class="control">
                    <div title="Click to move here" class="bar">
                    </div>
                    <div title="Number of concentric circles" class="slider" style="margin-left: 31px;">
                    </div>
                </dd>
                <dt>
                    Burst Type
                </dt>
                <dd class="title">
                    (Base colour)
                </dd>
                <dd>
                    1
                </dd>
                <dd class="control">
                    <div title="Click to move here" class="bar">
                    </div>
                    <div title="Primary (inner circle) colour" class="slider" style="margin-left: 6px;">
                    </div>
                </dd>
            </dl>
        </div>
        <div id="patchGrid" ondragstart="trial_ondragstart(event)" ondrag="trial_ondrag(event,patchGrid)" ondragend="trial_ondragend()">
        </div>
        <!--Main viewing window div-->
        <div id="VW">
        </div>
    </body>
</html>
