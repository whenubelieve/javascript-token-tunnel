<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=8" />
<style type="text/css"> 
    #VW {
        border: thin #FF00FF solid;
        width: 100px;
        height: 100px;
        z-index: 1;
    }
    #patchGrid {
        border: thin #000000 none;
        z-index: 1;
        width: 100px;
        height: 100px;
    }
	.windowframe {
		position:           absolute;
		left:               160px;
		top:                50px;
	}
	div.sliderbar {
		/*n_controlWidth*/
		width:              16px;
		/*n_control*/
		height:             120px;
		border:             0pt none;
		/*this.s_imgControl - note: uncomment this for a pretty blue button*/
		/*background-image: url('http://www.schillmania.com/projects/fireworks/demo-only/slider-bar.gif');*/
        background-color:   black;
	}
	.sliderbutton {
		position:           relative;
		/*this.n_pathLeft*/
		left:               1px;
		/*this.n_pathTop*/
		top:                35px;
		/*this.n_zIndex*/
		z-index:            1;
		cursor:             pointer;
		/*visibility: visible;	*/
        background-color:   red;
	}
	#patchGrid {
		cursor: crosshair;
	}
</style>
<title>proj9a</title>
<script type="text/javascript">

//calling this function places a slider on the page
function slider(a_init, a_tpl){

    // register in the global collection
	//create the object A_SLIDERS if it doesn't exist yet
    if (!window.A_SLIDERS)
		//create new array	
        window.A_SLIDERS = [];
    this.n_id = window.A_SLIDERS.length;
    window.A_SLIDERS[this.n_id] = this;

    // save config parameters in the slider object
    var s_key;
    if (a_tpl)
        for (s_key in a_tpl)
            this[s_key] = a_tpl[s_key];
    for (s_key in a_init)
        this[s_key] = a_init[s_key];
    this.n_pix2value = this.n_pathLength / (this.n_maxValue - this.n_minValue);
    if (this.n_value == null)
        this.n_value = this.n_minValue;

    //generate the control's HTML
	//need to change this to static HTML - maybe use css with classes to design the sliders?
	
    document.write('<div class="sliderbar" id="sl' +
	this.n_id + 'base">' +
    '<img class="sliderbutton" src="' +
    this.s_imgSlider +
    '" width="' +
    this.n_sliderWidth +
    '" height="' +
    this.n_sliderHeight +
    '" border="0" name="sl' +
    this.n_id +
    'slider" id="sl' +
    this.n_id +
    'slider" onmousedown="return f_sliderMouseDown(' +
    this.n_id +
    ')"/></div>');
    

    /*
    //a little test to see how to add elements to the body
    var foo = document.createElement('img');
    foo.src = "http://www.google.com/intl/en_ALL/images/logo.gif";
    //foo.setAttribute('src', 'http://www.google.com/intl/en_ALL/images/logo.gif');
    document.body.appendChild(foo);
    */
	
    /*
    //HTML Creation Phase
    //create a form
    var ee_form = document.createElement("form");
    ee_form.name = "form";
    //create text
    var txt = document.createTextNode("dynamic Zoomlevel");
    //create an input
    var ee_input = document.createElement("input");
    //set input name
    ee_input.name = "Zoomlevel";
    //set input id
    ee_input.id = "Zoomlevel";
    //set input type
    ee_input.type = "Text"
    //set size
    ee_input.size = 3;
    //set value
    ee_input.value = 2;
    //set onpropertychange
    ee_input.onpropertychange = "resetGrid();CreatePathLoadingProcess();CenterOffset()";
    //set onchange
    ee_input.onchange = "resetgrid();createpathloadingprocess();centeroffset()";
    //create a div
    var ee_div = document.createElement("div");
    //alert("value of ee_div is:" + ee_div);
    //alert(this);
    //set class for div
    ee_div.className = "sliderdiv";
    //set id for div
    ee_div.id = "sl" + this.n_id + "base";
    //create img tag
    var ee_img = document.createElement("img");
    //set class
    ee_img.className = "sliderimg";
    //set src
    ee_img.src = this.s_imgSlider;
    //set width
    ee_img.width = this.n_sliderWidth;
    //set height
    ee_img.height = this.n_sliderHeight;
    //set border
    ee_img.border = 0;
    //set name
    ee_img.name = "s1" + this.n_id + "slider";
    //set onmousedown
    ee_img.name = "return f_sliderMouseDown(" + this.n_id + ")";
    //insert input inside div
    ee_div.appendChild(ee_input);
    //insert img inside div
    ee_div.appendChild(ee_img);
    //insert the input into the form
    ee_form.appendChild(ee_input);
    //insert textnode into the form
    ee_form.appendChild(txt);
    //insert the div into the form
    ee_form.appendChild(ee_div);
    //insert the form into the body of the document
    //problem - this is being run before the page is being loaded
    //document.body.onload = document.body.appendChild(ee_form);
    //while (document.body == null){
            //setTimeout('document.body.appendChild(ee_form)', 10000);
    //}
    //this.appendChild(ee_form);
    ///note - when appendChild fails, it hangs. chances are almost any error stops the script
    //alert(123);
    */
    
    
    this.e_base = get_element('sl' + this.n_id + 'base');
    this.e_slider = get_element('sl' + this.n_id + 'slider');
    //alert(this.e_slider);

	//owner is 'window'
    this.f_setValue = f_sliderSetValue;
    this.f_getPos = f_sliderGetPos;

    // safely hook document/window events
    if (!window.f_savedMouseMove && document.onmousemove != f_sliderMouseMove) {
        window.f_savedMouseMove = document.onmousemove;
        document.onmousemove = f_sliderMouseMove;
    }
    if (!window.f_savedMouseUp && document.onmouseup != f_sliderMouseUp) {
        window.f_savedMouseUp = document.onmouseup;
        document.onmouseup = f_sliderMouseUp;
    }
    // preset to the value in the input box if available
    var e_input = this.s_form == null ? get_element(this.s_name) : document.forms[this.s_form] ? document.forms[this.s_form].elements[this.s_name] : null;
    this.f_setValue(e_input && e_input.value != '' ? e_input.value : null, 1);
    this.e_slider.style.visibility = 'visible';
}

//logic is implemented to smooth out the action of the slider
function f_sliderSetValue(n_value, b_noInputCheck){
	if (n_value == null)
		n_value = this.n_value == null ? this.n_minValue : this.n_value;
	if (isNaN(n_value))
		return false;
	// round to closest multiple if step is specified
	if (this.n_step)
		n_value = Math.round((n_value - this.n_minValue) / this.n_step) * this.n_step + this.n_minValue;
	// smooth out the result
	if (n_value % 1)
		n_value = Math.round(n_value * 1e5) / 1e5;

	if (n_value < this.n_minValue)
		n_value = this.n_minValue;
	if (n_value > this.n_maxValue)
		n_value = this.n_maxValue;

	this.n_value = n_value;

	// move the slider
	if (this.b_vertical)
		this.e_slider.style.top = (this.n_pathTop + this.n_pathLength - Math.round((n_value - this.n_minValue) * this.n_pix2value)) + 'px';
	else
		this.e_slider.style.left = (this.n_pathLeft + Math.round((n_value - this.n_minValue) * this.n_pix2value)) + 'px';

	// save new value
	//the final location may not be the same as where the mouse cursor is
	var e_input;
	if (this.s_form == null) {
		e_input = get_element(this.s_name);
		if (!e_input)
			return b_noInputCheck ? null : f_sliderError(this.n_id, "Can not find the input with ID='" + this.s_name + "'.");
	}
	else {
		var e_form = document.forms[this.s_form];
		if (!e_form)
			return b_noInputCheck ? null : f_sliderError(this.n_id, "Can not find the form with NAME='" + this.s_form + "'.");
		e_input = e_form.elements[this.s_name];
		if (!e_input)
			return b_noInputCheck ? null : f_sliderError(this.n_id, "Can not find the input with NAME='" + this.s_name + "'.");
	}
	e_input.value = n_value;
	
	//document.getElementById(e_input.id).value = e_input.value;
	//maybe instead of changing the value itself, try changing the attribute directly?
	//document.getElementById(e_input.id).setAttribute('value', n_value);
	//document.getElementById("sliderValue3").addEvent('load',function(){ pageisloaded=1; });
	
	if (document.createEvent){ //ff only
		
		//needed for the zoomlevel, but it breaks when inserted here. need to ask Tom.
		//CenterOffset();
		
	}
	//make the update to the input element (the text box) for zoomlevel
	//alert(e_input.id + "," + n_value);

}

// get absolute position of the element in the document
function f_sliderGetPos(b_vertical, b_base){
    var n_pos = 0, s_coord = (b_vertical ? 'Top' : 'Left');
    var o_elem = o_elem2 = b_base ? this.e_base : this.e_slider;

    while (o_elem) {
        n_pos += o_elem["offset" + s_coord];
        o_elem = o_elem.offsetParent;
    }
    o_elem = o_elem2;

    var n_offset;
    while (o_elem.tagName != "BODY") {
        n_offset = o_elem["scroll" + s_coord];
        if (n_offset)
            n_pos -= o_elem["scroll" + s_coord];
        o_elem = o_elem.parentNode;
    }
    return n_pos;
}

function f_sliderMouseDown(n_id){
    window.n_activeSliderId = n_id;
    return false;
}

function f_sliderMouseUp(e_event, b_watching){
    if (window.n_activeSliderId != null) {
        var o_slider = window.A_SLIDERS[window.n_activeSliderId];
        o_slider.f_setValue(o_slider.n_minValue +
        (o_slider.b_vertical ? (o_slider.n_pathLength - parseInt(o_slider.e_slider.style.top) + o_slider.n_pathTop) : (parseInt(o_slider.e_slider.style.left) - o_slider.n_pathLeft)) /
        o_slider.n_pix2value);
        if (b_watching)
            return;
        window.n_activeSliderId = null;
    }
    if (window.f_savedMouseUp)
        return window.f_savedMouseUp(e_event);
}

//this part controls the behavior of the slider while being clicked and dragged
function f_sliderMouseMove(e_event){

    if (!e_event && window.event)
        e_event = window.event;

    // save mouse coordinates
    if (e_event) {
        window.n_mouseX = e_event.clientX + f_scrollLeft();
        window.n_mouseY = e_event.clientY + f_scrollTop();
    }

    // check if in drag mode
    if (window.n_activeSliderId != null) {
        var o_slider = window.A_SLIDERS[window.n_activeSliderId];
        var n_pxOffset;
        if (o_slider.b_vertical) {
            var n_sliderTop = window.n_mouseY - o_slider.n_sliderHeight / 2 - o_slider.f_getPos(1, 1) - 3;
            // limit the slider movement
            if (n_sliderTop < o_slider.n_pathTop)
                n_sliderTop = o_slider.n_pathTop;
            var n_pxMax = o_slider.n_pathTop + o_slider.n_pathLength;
            if (n_sliderTop > n_pxMax)
                n_sliderTop = n_pxMax;
            o_slider.e_slider.style.top = n_sliderTop + 'px';
            n_pxOffset = o_slider.n_pathLength - n_sliderTop + o_slider.n_pathTop;
        }
        else {
            var n_sliderLeft = window.n_mouseX - o_slider.n_sliderWidth / 2 - o_slider.f_getPos(0, 1) - 3;
            // limit the slider movement
            if (n_sliderLeft < o_slider.n_pathLeft)
                n_sliderLeft = o_slider.n_pathLeft;
            var n_pxMax = o_slider.n_pathLeft + o_slider.n_pathLength;
            if (n_sliderLeft > n_pxMax)
                n_sliderLeft = n_pxMax;
            o_slider.e_slider.style.left = n_sliderLeft + 'px';
            n_pxOffset = n_sliderLeft - o_slider.n_pathLeft;
        }
        if (o_slider.b_watch)
            f_sliderMouseUp(e_event, 1);
        return false;
    }
    if (window.f_savedMouseMove)
        return window.f_savedMouseMove(e_event);
}

// get the scroller positions of the page
function f_scrollLeft(){
    return f_filterResults(window.pageXOffset ? window.pageXOffset : 0, document.documentElement ? document.documentElement.scrollLeft : 0, document.body ? document.body.scrollLeft : 0);
}
function f_scrollTop(){
    return f_filterResults(window.pageYOffset ? window.pageYOffset : 0, document.documentElement ? document.documentElement.scrollTop : 0, document.body ? document.body.scrollTop : 0);
}
function f_filterResults(n_win, n_docel, n_body){
    var n_result = n_win ? n_win : 0;
    if (n_docel && (!n_result || (n_result > n_docel)))
        n_result = n_docel;
    return n_body && (!n_result || (n_result > n_body)) ? n_body : n_result;
}
function f_sliderError(n_id, s_message){
    alert("Slider #" + n_id + " Error:\n" + s_message);
    window.n_activeSliderId = null;
}
//need to get rid of this document.all - it is deprecated
//this if statement is true if IE
get_element = document.all ? function(s_id){
    //return document.all[s_id]
    //alert("NULL!!");
    //return NULL;
    return document.getElementById(s_id)
}
 : function(s_id){
    return document.getElementById(s_id)
};

    //SLIDER1
    var A_TPL = {
        'b_vertical': true,
        'b_watch': true,
        'n_controlWidth': 16,
        'n_controlHeight': 120,
        'n_sliderWidth': 15,
        'n_sliderHeight': 16,
        'n_pathLeft': 1,
        'n_pathTop': 1,
        'n_pathLength': 103,
        //this is the long slider bar
        's_imgControl': 'http://www.schillmania.com/projects/fireworks/demo-only/slider-bar.gif',
        //this is the slider button
        's_imgSlider': 'http://www.schillmania.com/projects/fireworks/demo-only/slider.png',
        'n_zIndex': 1
    }
    var A_INIT = {
        //this refers to the form number
        's_form': 0,
        's_name': 'Zoomlevel',
        'n_minValue': 0,
        'n_maxValue': 3,
        'n_value': 2,
        'n_step': 1
    }
    document.write('<form name="form">Zoom<input name="Zoomlevel" id="Zoomlevel" type="Text" size="3" value="2" onpropertychange="resetGrid();CreatePathLoadingProcess();CenterOffset()" onchange="resetgrid();createpathloadingprocess();centeroffset()"/>');
    new slider(A_INIT, A_TPL);  //create the div and img
    document.write('</form>');
    //SLIDER2
    var A_TPL = {
        'b_vertical': true,
        'b_watch': true,
		//css
        'n_controlWidth': 16,		
        'n_controlHeight': 120,
        'n_sliderWidth': 15,
        'n_sliderHeight': 16,
        'n_pathLeft': 1,
        'n_pathTop': 1,
        'n_pathLength': 103,
        //cssthis is the long slider bar
        's_imgControl': 'http://www.schillmania.com/projects/fireworks/demo-only/slider-bar.gif',
        //this is the slider button
        's_imgSlider': 'http://www.schillmania.com/projects/fireworks/demo-only/slider.png',
        'n_zIndex': 1
    }
    var A_INIT = {
        //this refers to the form number. The first form in the document is form number 0, next is 1, etc.
        's_form': 1,
        's_name': 'Width',//change this according to what is in the id 6 lines below
        'n_minValue': 200,
        'n_maxValue': 1000,
        'n_value': 400,
        'n_step': 100
    }
    document.write('<form name="form2">Width<input name="Width" id="Width" type="Text" size="3" onpropertychange="resetGrid();CreatePathLoadingProcess();ResizeVW()" onchange="resetGrid();CreatePathLoadingProcess();ResizeVW()" />')
    /new slider(A_INIT, A_TPL);
    document.write('</form>');
    //SLIDER3 - height
    var A_TPL = {
        'b_vertical': true,
        'b_watch': true,
        'n_controlWidth': 16,
        'n_controlHeight': 120,
        'n_sliderWidth': 15,
        'n_sliderHeight': 16,
        'n_pathLeft': 1,
        'n_pathTop': 1,
        'n_pathLength': 103,
        //this is the long slider bar
        's_imgControl': 'http://www.schillmania.com/projects/fireworks/demo-only/slider-bar.gif',
        //this is the slider button
        's_imgSlider': 'http://www.schillmania.com/projects/fireworks/demo-only/slider.png',
        'n_zIndex': 1
    }
    var A_INIT = {
        //this refers to the form number. The first form in the document is form number 0, next is 1, etc.
        's_form': 2,
        's_name': 'Height',
        'n_minValue': 200,
        'n_maxValue': 1000,
        'n_value': 400,
        'n_step': 100
    }
    document.write('<form name="form3">Height<input name="Height" id="Height" type="Text" size="3" onpropertychange="resetGrid();CreatePathLoadingProcess();ResizeVW()" onchange="resetGrid();CreatePathLoadingProcess();ResizeVW()" />');
    new slider(A_INIT, A_TPL);
    document.write('</form>');


patchSize=256;
zoomlevel=0;
imageSize= Math.pow(2, zoomlevel)*patchSize;
var height=0;
var width=0;
var imgpsz = { x: 256, y: 256};
// Image Prototype
// objects created by:
// var img = new SVImage( <url>, <xs>, <ys>, <zs>);

function SVImage( url, xs, ys, zs) {
    this.url = url;
    this.xs = xs;
    this.ys = ys;
    this.zs = zs;
}

SVImage.prototype.getUrl = function () {
    return this.url;
}

SVImage.prototype.getXs = function () {
    return this.xs;
}
SVImage.prototype.getYs = function () {
    return this.ys;
}
SVImage.prototype.getZs = function () {
    return this.zs;
}


// Image Point Prototype
// objects created by:
//     var imgpt = new SVImagePoint( <image>, <x>, <y>, <z>);

function SVImagePoint( img, xloc, yloc, zloc) {
    this.image = img;
    this.x = xloc;
    this.y = yloc;
    this.z = zloc;
}

// Viewing Window Prototype
// objects created by:
//     var imgpt = new Vieww( <image-point>, <xs>, <ys>, <zs>);

function Vieww( imgpnt, xs, ys, zs) {
    this.imgpnt = imgpnt;
    this.xs = xs;
    this.ys = ys;
    this.zs = zs;
}

// Image Patch Prototype
// objects created by:
//     var ptch = new SVImagePatch( <image>, <x>, <y>, <z>, <zoom>);

function SVImagePatch( img, xind, yind, zind, zoom) {
    this.image = img;
    this.xind = xind;
    this.yind = yind;
    this.zind = zind;
    this.zm = zoom;
}

// Image Patch Point Prototype
// objects created by:
//     var ptch = new PatchPoint( <patch>, <x>, <y>);

function PatchPoint( patch, xloc, yloc) {
    this.patch = patch;
    this.x = xloc;
    this.y = yloc;
}


// Viewing Window Point Prototype
// objects created by:
//     var imgpt = new ViewPoint( <view-wnd>, <x>, <y>);

function ViewPoint( vw, xloc, yloc) {
    this.vw = vw;
    this.x = xloc;
    this.y = yloc;
}

// Initilizations 
var imgage = new SVImage;
imgage.xs=0;
imgage.ys=0;
var imagePoint = new SVImagePoint;

var vwcorner=new SVImagePoint;
var vw = new Vieww;
vw.imgpnt=vwcorner;
vw.imgpnt.x = 0;
vw.imgpnt.y = 0;
vw.xs=0;
vw.ys=0;

var patchPoint = new PatchPoint;

var vwPoint0 = new ViewPoint;
var vwPoint1 = new ViewPoint;

var patch = new SVImagePatch;
patch.xind = 1;
patch.yind = 1;

var zIndex=0;
var zoomlevel = 0;
var MaxZoom = 4; /*  0,1,2,3,4*/
var MaxzIndex=4;
var row=0;
var col=0;
var number=0;
//var head="Test%20Images/foo."; /*File name operation */
//var tail = ".jpeg";

var haut = 0;  // top is a reserved word in Chrome and Opera, changed from top to haut 
/*the visible window that cropped, its size affects the Zoomoffset function*/
var right = 0;
var bottom = 0;
var left = 0;

var tleft =20	;
var ttop =70;

var row=0;
var col=0;
var dx = 0;
var dy = 0;
var MaxZoom=4;
var YGridNumber = 1; 
var XGridNumber = 1;
	
function ResizeVW() //change happens to viewing window and grid patches.
{ 
  	height=parseInt(document.getElementById("Height").value);// property of viewing window
  	width=parseInt(document.getElementById("Width").value); // fixed, once given
  	zoomlevel=document.getElementById("Zoomlevel").value;

	var boundaryCheckY=vw.imgpnt.y+height-patchSize*Math.pow(2, zoomlevel);
	var boundaryCheckX=vw.imgpnt.x+width-patchSize*Math.pow(2, zoomlevel);

 	if(boundaryCheckX>0&&(vw.imgpnt.x-boundaryCheckX>0)) //resize on the edge of boundary
 	{dx=boundaryCheckX; dy=0; CommitMove();}
  	if( boundaryCheckY>0&&(vw.imgpnt.y-boundaryCheckY>0)) 
	{dx=0; dy=boundaryCheckY;CommitMove();}

	number = Math.pow(4, zoomlevel);
	imgage.xs = Math.pow(2, zoomlevel) * patchSize;
	imgage.ys = Math.pow(2, zoomlevel) * patchSize;
 
	document.getElementById("VW").style.height=height+"px";
	document.getElementById("VW").style.width=width+"px";

	right=left+width;
	bottom=haut+height;
	document.getElementById("patchGrid").style.clip="rect(" + haut + "px " + right + "px " + bottom + "px " + left + "px)";
}

function resetGrid(){
	for (i=1; i<=20; i++){// A priori number set
		for (j=1; j<=20; j++){
			document.getElementById("img["+i+"]["+j+"]").style.display="none";//hide contents;
		}
	}
}

function gridFormation(){
	//resetGrid();
	row=col=20; // Fixed number of grids, but load according to the size of viewing window
 	//row=Math.ceil((vw.imgpnt.x-dx+width)/patchSize)+1;
   	//col=Math.ceil((vw.imgpnt.x-dx+width)/patchSize)+1;
    X=parseInt(document.getElementById("X").value);  //Initial offset
    Y=parseInt(document.getElementById("Y").value);
    dx=-(X-vw.imgpnt.x);
    dy=-(Y-vw.imgpnt.y);
    CommitMove();
   
	zoomlevel=document.getElementById("Zoomlevel").value;
	zIndex=document.getElementById("zIndex").value;
	var table = document.getElementById("patchGrid");
	
	table.style.height=row*patchSize;
	table.style.width=col*patchSize;
		
	for (i = 1; i <= row; i++) {
		var tr = document.createElement("tr");
		tr.height =patchSize ;
		tr.width=col*patchSize;
		tr.id="tr1";
		for(j=1;j<=col;j++){
			dummy=document.createElement("td");
			dummy.height=patchSize;
			dummy.width=patchSize;
			img=document.createElement("img");
		    img.id="img["+i+"]["+j+"]";
		    img.style.display="none";
		    img.unselectable="on";  
			//img.style.draggable="true" 
            dummy.appendChild(img);
			tr.appendChild(dummy);		
		}
	table.appendChild(tr);
	}
}

function CreatePathLoadingProcess(){
	//setInterval("PatchLoadingX()",90);
	setTimeout("PatchLoadingX()",90);
}


function PatchLoadingX(){
	col=Math.ceil((vw.imgpnt.x-dx+width)/patchSize)+1;
	row=Math.ceil((vw.imgpnt.y-dy+height)/patchSize)+1;
	zoomlevel=document.getElementById("Zoomlevel").value;
	zIndex=document.getElementById("zIndex").value;

	if (row>Math.pow(2, zoomlevel)){
		row=Math.pow(2, zoomlevel);
	}
	if (col>Math.pow(2, zoomlevel)){
		col=Math.pow(2, zoomlevel);
	}

	for(I=1;I<=row;I++){
		for (J=1;J<=col;J++){ // img[i][j], the naming system
			document.getElementById("img["+I+"]["+J+"]").style.display="";
			document.getElementById("img["+I+"]["+J+"]").src="http://wonko.via.cornell.edu/bigimgs/test2/bar."+ zoomlevel + "." +( J -1)+ "." + (I-1) + "."+ zIndex+ ".jpeg";
		}
	}
	clearInterval;
}


function omniDrag(ele,e) {
	//alert("done");
	// event.dataTransfer.effectAllowed = "none"; // do not allow copy
	
	var event = window.event || e;  //FireFox compatibility
	CooX0 = event.clientX;
	CooY0 = event.clientY;
	vw.xs=width;
	vw.ys=height;
	document.onmouseup = function voidDrag(){
		this.onmousemove = null;
	}
	if(event.preventDefault){
		event.preventDefault();
	}
	
	document.onmousemove = function trial_ondrag(e){
		var event = window.event || e;
	
		if(document.all && event.button == 0){
			this.onmousemove = null;
			return false;
		};
	
	imageDimension=patchSize*Math.pow(2, zoomlevel);
	CooX1 = event.clientX;
	CooY1 = event.clientY;
	
	// document.body.style.cursor="crosshair";
	dx =(CooX1 - CooX0);
	dy = (CooY1 - CooY0);
	CooX0 = CooX1;    /*update frame*/
	CooY0 = CooY1;
	
	if((vw.imgpnt.x - dx)<0)  //Dr.Alberto mentioned that we shall to so
	{dx=0;}    
	if((vw.imgpnt.y - dy)<0)
	{dy=0;}
	if((vw.imgpnt.x-dx+width)>patchSize*Math.pow(2, zoomlevel))
	{dx=0;}
	if((vw.imgpnt.y-dy+height)>patchSize*Math.pow(2, zoomlevel))
	{dy=0;}
	CommitMove();
	
	if((vw.imgpnt.x+width)>patchSize*row||(vw.imgpnt.y+height)>patchSize*col){
		CreatePathLoadingProcess();
	}
	return false
	}
}


function mouseup()
{
	mouseover=false
}

function trial_ondragend(event) {
 //  event.dataTransfer.dropEffect = "none"; 
}

function CommitMove() {
   	vw.imgpnt.x = vw.imgpnt.x - dx; // Update coordinates of view windox x,y changes with zooming
   	vw.imgpnt.y = vw.imgpnt.y - dy;     //panning within the buffer zone
                    
    document.getElementById("X").value=vw.imgpnt.x;  //Display for the sake of debug
    document.getElementById("Y").value=vw.imgpnt.y;
    document.getElementById("DiagX").value=vw.imgpnt.x+width;
    document.getElementById("DiagY").value=vw.imgpnt.y+height;

    right = right - dx; 
    left = left - dx;
    haut = haut - dy;
    bottom = bottom - dy;
 
    tleft = parseInt(document.getElementById('patchGrid').style.left) + dx;
    document.getElementById('patchGrid').style.left = tleft + 'px';
    ttop = parseInt(document.getElementById('patchGrid').style.top) + dy;
    document.getElementById('patchGrid').style.top = ttop + 'px';
    document.getElementById('patchGrid').style.clip = "rect(" + haut + "px " + right + "px " + bottom + "px " + left + "px)";
    dx = 0;// Attention !!!
    dy = 0;//  Attention !!! It was moved from ondragend() 
}

function InputMove()
{
    X=parseInt(document.getElementById("X").value);  //Display for the sake of debug
    Y=parseInt(document.getElementById("Y").value);
    
    dx=-(X-vw.imgpnt.x);
    dy=-(Y-vw.imgpnt.y);

 if((vw.imgpnt.x - dx)<0)  //Dr.Alberto mentioned that we shall to so
     {dx=0;}    
   if((vw.imgpnt.y - dy)<0)
    {dy=0;}
   if((vw.imgpnt.x-dx+width)>patchSize*Math.pow(2, zoomlevel))
    {dx=0;}
   if((vw.imgpnt.y-dy+height)>patchSize*Math.pow(2, zoomlevel))
    {dy=0;}
    CommitMove();

  if((vw.imgpnt.x+width)>patchSize*row||(vw.imgpnt.y+height)>patchSize*col)
{CreatePathLoadingProcess();}

}

function CenterOffsetIn(imagePoint) //CenterOffset(Zfactor,imagePoint)
{
	//zoomlevel=document.getElementById("Zoomlevel").value;
	zoomlevel=parseInt(document.getElementById("Zoomlevel").value);
	if (zoomlevel < MaxZoom && zoomlevel >= 0){
		zoomlevel=zoomlevel+1;
		document.getElementById("Zoomlevel").value=zoomlevel;
		
		var centerX = (vw.imgpnt.x+0.5*width);
		var centerY = (vw.imgpnt.y+0.5*height);// center of the viewing window in the zoomed frame
		
		X=2*centerX-0.5*width;  //Zoom from center
		Y=2*centerY-0.5*height;
		//X=Zfactor*imagePoint.x-0.5*width;
		//Y=Zfactor*imagePoint.y-0.5*height;
		
		dx=-Math.floor((X-vw.imgpnt.x));
		dy=-Math.floor((Y-vw.imgpnt.y));
		
		if ((vw.imgpnt.x - dx)>=0&&(vw.imgpnt.y - dy)>=0
		&&(vw.imgpnt.x-dx+width)<=patchSize*Math.pow(2, zoomlevel)&&
		(vw.imgpnt.y-dy+height)<=patchSize*Math.pow(2, zoomlevel))
		{ CommitMove(); }//Panning outside the buffer zone
		
		if((vw.imgpnt.x+width)>patchSize*row||(vw.imgpnt.y+height)>patchSize*col)
		{CreatePathLoadingProcess();}	
	}
}


function CenterOffsetOut(imagePoint) //CenterOffset(Zfactor,imagePoint)
{

	//zoomlevel=document.getElementById("Zoomlevel").value;
	zoomlevel=parseInt(document.getElementById("Zoomlevel").value);
	if (zoomlevel <=MaxZoom && zoomlevel > 0)
		{
		zoomlevel=zoomlevel-1;
		document.getElementById("Zoomlevel").value=zoomlevel;
		
		var centerX = (vw.imgpnt.x+0.5*width);
		var centerY = (vw.imgpnt.y+0.5*height);// center of the viewing window in the zoomed frame
		
		X=0.5*centerX-0.5*width;  //Zoom from center
		if (X<0)
		{X=0;}
		
		Y=0.5*centerY-0.5*height;
		if (Y<0)
		{Y=0;}
		
		
		//X=Zfactor*imagePoint.x-0.5*width;
		//Y=Zfactor*imagePoint.y-0.5*height;
		
		dx=-Math.floor((X-vw.imgpnt.x));
		dy=-Math.floor((Y-vw.imgpnt.y));
		
		//if (X!=0&&(vw.imgpnt.x-dx+width)>(patchSize*Math.pow(2, zoomlevel)))
		//{dx=vw.imgpnt.x+width-patchSize*Math.pow(2,zoomlevel);}
		//if (Y!=0&&(vw.imgpnt.y-dy+height)>(patchSize*Math.pow(2, zoomlevel)))
		//{dy=vw.imgpnt.y+height-patchSize*Math.pow(2,zoomlevel);}
		
		if (X!=0&&(X-dx+width)>(patchSize*Math.pow(2, zoomlevel)))
		{dx=X+width-patchSize*Math.pow(2,zoomlevel);}
		if (Y!=0&&(Y-dy+height)>(patchSize*Math.pow(2, zoomlevel)))
		{dy=Y+height-patchSize*Math.pow(2,zoomlevel);}
		
		//if ((vw.imgpnt.x - dx)>=0&&(vw.imgpnt.y - dy)>=0
		// &&(vw.imgpnt.x-dx+width)<=patchSize*Math.pow(2, zoomlevel)&&
		//(vw.imgpnt.y-dy+height)<=patchSize*Math.pow(2, zoomlevel)||(X==0||Y==0))
		{ CommitMove(); }//Panning outside the buffer zone
		
		if((vw.imgpnt.x+width)>patchSize*row||(vw.imgpnt.y+height)>patchSize*col)
		{CreatePathLoadingProcess();}

	}
}

function zIndexChanging(event){
	zIndex=parseInt(document.getElementById("zIndex").value);
		
	//event.detail  FireFox
	if ((event.wheelDelta > 0||event.detail<0 )&& zIndex< MaxzIndex&& zIndex>= 0)
	{ /* Zoom limit */
		zIndex= zIndex+ 1;/* ZoomIn, load images */
		document.getElementById("zIndex").value=zIndex;
		resetGrid();CreatePathLoadingProcess();
	}
	
	if ((event.wheelDelta < 0||event.detail>0 )&& zIndex<=  MaxzIndex&&zIndex> 0 ){ /* ZoomOut, clearOut images */
		zIndex= zIndex- 1;
		document.getElementById("zIndex").value=zIndex;	
		resetGrid();
		CreatePathLoadingProcess();
	}

}

function InitforFireFoxWheel ()
{
	// for mouse scrolling in Firefox
	var elem = document.getElementById ("patchGrid");
	if (elem.addEventListener) {
		elem.addEventListener ("DOMMouseScroll", zIndexChanging, false);    
	} 
}
</script>
</head>

<body id="main" oncontextmenu=event.returnValue=false onselectstart=event.returnValue=false  
onload="ResizeVW();gridFormation();CreatePathLoadingProcess();InitforFireFoxWheel ()">

<form method="post">
	<!--<input id="Width" name="Width1" type="text" onchange="resetGrid();CreatePathLoadingProcess();ResizeVW()" value="400" />
	<input id="Height" name="Height1" type="text"   onchange="resetGrid();CreatePathLoadingProcess();ResizeVW()" value="400"/>
	<input id="Zoomlevel"name="zoomlevel1" type="text" onchange="resetGrid();CreatePathLoadingProcess()" value="2" />-->
	<input id="zIndex" name="zIndex" type="text"type="text" onchange="resetGrid();CreatePathLoadingProcess()" value="0" />
	<input name="ZoomIn" type="button" value="ZoomIn" onclick="resetGrid();CreatePathLoadingProcess();CenterOffsetIn()"/>
	<input name="ZoomOut" type="button" value="ZoomOut" onclick="resetGrid();CreatePathLoadingProcess();CenterOffsetOut()"/>
</form>

<div id="VW" class="windowframe" >
</div>

<table id="patchGrid" class="windowframe" draggable="true" cellpadding="0" cellspacing="0" style="left: 160px; top: 50px;" onmousedown="omniDrag(this,event)" onmousewheel="zIndexChanging(event)" >
</table>

<form method="post">
	<input id="X" name="Text1" type="text" onchange="InputMove()" value="0" />
	<input id="Y" name="Text2" type="text" onchange="InputMove()" value="0" />
	<input id="DiagX" name="Text3" type="text" />
	<input id="DiagY" name="Text4" type="text" />
</form>
<!--<img src="http://www.google.com/intl/en_ALL/images/logo.gif"/>-->
</body>

</html>
